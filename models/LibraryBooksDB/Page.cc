/**
 *
 *  Page.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Page.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::librarybooks;

const std::string Page::Cols::_number = "number";
const std::string Page::Cols::_book_id = "book_id";
const std::string Page::Cols::_content = "content";
const std::vector<std::string> Page::primaryKeyName = {"number","book_id"};
const bool Page::hasPrimaryKey = true;
const std::string Page::tableName = "page";

const std::vector<typename Page::MetaData> Page::metaData_={
{"number","int32_t","integer",4,0,1,1},
{"book_id","int32_t","integer",4,0,1,1},
{"content","std::string","text",0,0,0,0}
};
const std::string &Page::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Page::Page(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["number"].isNull())
        {
            number_=std::make_shared<int32_t>(r["number"].as<int32_t>());
        }
        if(!r["book_id"].isNull())
        {
            bookId_=std::make_shared<int32_t>(r["book_id"].as<int32_t>());
        }
        if(!r["content"].isNull())
        {
            content_=std::make_shared<std::string>(r["content"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 3 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            number_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            bookId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            content_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Page::Page(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            number_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            bookId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            content_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

Page::Page(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("number"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["number"].isNull())
        {
            number_=std::make_shared<int32_t>((int32_t)pJson["number"].asInt64());
        }
    }
    if(pJson.isMember("book_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["book_id"].isNull())
        {
            bookId_=std::make_shared<int32_t>((int32_t)pJson["book_id"].asInt64());
        }
    }
    if(pJson.isMember("content"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["content"].isNull())
        {
            content_=std::make_shared<std::string>(pJson["content"].asString());
        }
    }
}

void Page::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            number_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            bookId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            content_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

void Page::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("number"))
    {
        if(!pJson["number"].isNull())
        {
            number_=std::make_shared<int32_t>((int32_t)pJson["number"].asInt64());
        }
    }
    if(pJson.isMember("book_id"))
    {
        if(!pJson["book_id"].isNull())
        {
            bookId_=std::make_shared<int32_t>((int32_t)pJson["book_id"].asInt64());
        }
    }
    if(pJson.isMember("content"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["content"].isNull())
        {
            content_=std::make_shared<std::string>(pJson["content"].asString());
        }
    }
}

const int32_t &Page::getValueOfNumber() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(number_)
        return *number_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Page::getNumber() const noexcept
{
    return number_;
}
void Page::setNumber(const int32_t &pNumber) noexcept
{
    number_ = std::make_shared<int32_t>(pNumber);
    dirtyFlag_[0] = true;
}

const int32_t &Page::getValueOfBookId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(bookId_)
        return *bookId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Page::getBookId() const noexcept
{
    return bookId_;
}
void Page::setBookId(const int32_t &pBookId) noexcept
{
    bookId_ = std::make_shared<int32_t>(pBookId);
    dirtyFlag_[1] = true;
}

const std::string &Page::getValueOfContent() const noexcept
{
    static const std::string defaultValue = std::string();
    if(content_)
        return *content_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Page::getContent() const noexcept
{
    return content_;
}
void Page::setContent(const std::string &pContent) noexcept
{
    content_ = std::make_shared<std::string>(pContent);
    dirtyFlag_[2] = true;
}
void Page::setContent(std::string &&pContent) noexcept
{
    content_ = std::make_shared<std::string>(std::move(pContent));
    dirtyFlag_[2] = true;
}
void Page::setContentToNull() noexcept
{
    content_.reset();
    dirtyFlag_[2] = true;
}

void Page::updateId(const uint64_t id)
{
}
typename Page::PrimaryKeyType Page::getPrimaryKey() const
{
    return std::make_tuple(*number_,*bookId_);
}

const std::vector<std::string> &Page::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "number",
        "book_id",
        "content"
    };
    return inCols;
}

void Page::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getNumber())
        {
            binder << getValueOfNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getBookId())
        {
            binder << getValueOfBookId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getContent())
        {
            binder << getValueOfContent();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Page::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    return ret;
}

void Page::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getNumber())
        {
            binder << getValueOfNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getBookId())
        {
            binder << getValueOfBookId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getContent())
        {
            binder << getValueOfContent();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Page::toJson() const
{
    Json::Value ret;
    if(getNumber())
    {
        ret["number"]=getValueOfNumber();
    }
    else
    {
        ret["number"]=Json::Value();
    }
    if(getBookId())
    {
        ret["book_id"]=getValueOfBookId();
    }
    else
    {
        ret["book_id"]=Json::Value();
    }
    if(getContent())
    {
        ret["content"]=getValueOfContent();
    }
    else
    {
        ret["content"]=Json::Value();
    }
    return ret;
}

Json::Value Page::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 3)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getNumber())
            {
                ret[pMasqueradingVector[0]]=getValueOfNumber();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getBookId())
            {
                ret[pMasqueradingVector[1]]=getValueOfBookId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getContent())
            {
                ret[pMasqueradingVector[2]]=getValueOfContent();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getNumber())
    {
        ret["number"]=getValueOfNumber();
    }
    else
    {
        ret["number"]=Json::Value();
    }
    if(getBookId())
    {
        ret["book_id"]=getValueOfBookId();
    }
    else
    {
        ret["book_id"]=Json::Value();
    }
    if(getContent())
    {
        ret["content"]=getValueOfContent();
    }
    else
    {
        ret["content"]=Json::Value();
    }
    return ret;
}

bool Page::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("number"))
    {
        if(!validJsonOfField(0, "number", pJson["number"], err, true))
            return false;
    }
    else
    {
        err="The number column cannot be null";
        return false;
    }
    if(pJson.isMember("book_id"))
    {
        if(!validJsonOfField(1, "book_id", pJson["book_id"], err, true))
            return false;
    }
    else
    {
        err="The book_id column cannot be null";
        return false;
    }
    if(pJson.isMember("content"))
    {
        if(!validJsonOfField(2, "content", pJson["content"], err, true))
            return false;
    }
    return true;
}
bool Page::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Page::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("number"))
    {
        if(!validJsonOfField(0, "number", pJson["number"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("book_id"))
    {
        if(!validJsonOfField(1, "book_id", pJson["book_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("content"))
    {
        if(!validJsonOfField(2, "content", pJson["content"], err, false))
            return false;
    }
    return true;
}
bool Page::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Page::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson,
                            std::string &err,
                            bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
