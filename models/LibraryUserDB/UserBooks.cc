/**
 *
 *  UserBooks.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "UserBooks.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::libraryuser;

const std::string UserBooks::Cols::_id = "id";
const std::string UserBooks::Cols::_login_user = "login_user";
const std::string UserBooks::Cols::_book_id = "book_id";
const std::string UserBooks::Cols::_author_id = "author_id";
const std::string UserBooks::primaryKeyName = "id";
const bool UserBooks::hasPrimaryKey = true;
const std::string UserBooks::tableName = "user_books";

const std::vector<typename UserBooks::MetaData> UserBooks::metaData_={
{"id","int32_t","integer",4,1,1,1},
{"login_user","std::string","character varying",255,0,0,1},
{"book_id","int32_t","integer",4,0,0,1},
{"author_id","int32_t","integer",4,0,0,1}
};
const std::string &UserBooks::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
UserBooks::UserBooks(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["login_user"].isNull())
        {
            loginUser_=std::make_shared<std::string>(r["login_user"].as<std::string>());
        }
        if(!r["book_id"].isNull())
        {
            bookId_=std::make_shared<int32_t>(r["book_id"].as<int32_t>());
        }
        if(!r["author_id"].isNull())
        {
            authorId_=std::make_shared<int32_t>(r["author_id"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 4 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            loginUser_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            bookId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            authorId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

UserBooks::UserBooks(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 4)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            loginUser_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            bookId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            authorId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
}

UserBooks::UserBooks(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("login_user"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["login_user"].isNull())
        {
            loginUser_=std::make_shared<std::string>(pJson["login_user"].asString());
        }
    }
    if(pJson.isMember("book_id"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["book_id"].isNull())
        {
            bookId_=std::make_shared<int32_t>((int32_t)pJson["book_id"].asInt64());
        }
    }
    if(pJson.isMember("author_id"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["author_id"].isNull())
        {
            authorId_=std::make_shared<int32_t>((int32_t)pJson["author_id"].asInt64());
        }
    }
}

void UserBooks::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 4)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            loginUser_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            bookId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            authorId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
}

void UserBooks::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("login_user"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["login_user"].isNull())
        {
            loginUser_=std::make_shared<std::string>(pJson["login_user"].asString());
        }
    }
    if(pJson.isMember("book_id"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["book_id"].isNull())
        {
            bookId_=std::make_shared<int32_t>((int32_t)pJson["book_id"].asInt64());
        }
    }
    if(pJson.isMember("author_id"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["author_id"].isNull())
        {
            authorId_=std::make_shared<int32_t>((int32_t)pJson["author_id"].asInt64());
        }
    }
}

const int32_t &UserBooks::getValueOfId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &UserBooks::getId() const noexcept
{
    return id_;
}
void UserBooks::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename UserBooks::PrimaryKeyType & UserBooks::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &UserBooks::getValueOfLoginUser() const noexcept
{
    static const std::string defaultValue = std::string();
    if(loginUser_)
        return *loginUser_;
    return defaultValue;
}
const std::shared_ptr<std::string> &UserBooks::getLoginUser() const noexcept
{
    return loginUser_;
}
void UserBooks::setLoginUser(const std::string &pLoginUser) noexcept
{
    loginUser_ = std::make_shared<std::string>(pLoginUser);
    dirtyFlag_[1] = true;
}
void UserBooks::setLoginUser(std::string &&pLoginUser) noexcept
{
    loginUser_ = std::make_shared<std::string>(std::move(pLoginUser));
    dirtyFlag_[1] = true;
}

const int32_t &UserBooks::getValueOfBookId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(bookId_)
        return *bookId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &UserBooks::getBookId() const noexcept
{
    return bookId_;
}
void UserBooks::setBookId(const int32_t &pBookId) noexcept
{
    bookId_ = std::make_shared<int32_t>(pBookId);
    dirtyFlag_[2] = true;
}

const int32_t &UserBooks::getValueOfAuthorId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(authorId_)
        return *authorId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &UserBooks::getAuthorId() const noexcept
{
    return authorId_;
}
void UserBooks::setAuthorId(const int32_t &pAuthorId) noexcept
{
    authorId_ = std::make_shared<int32_t>(pAuthorId);
    dirtyFlag_[3] = true;
}

void UserBooks::updateId(const uint64_t id)
{
}

const std::vector<std::string> &UserBooks::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "login_user",
        "book_id",
        "author_id"
    };
    return inCols;
}

void UserBooks::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getLoginUser())
        {
            binder << getValueOfLoginUser();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getBookId())
        {
            binder << getValueOfBookId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getAuthorId())
        {
            binder << getValueOfAuthorId();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> UserBooks::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    return ret;
}

void UserBooks::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getLoginUser())
        {
            binder << getValueOfLoginUser();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getBookId())
        {
            binder << getValueOfBookId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getAuthorId())
        {
            binder << getValueOfAuthorId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value UserBooks::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getLoginUser())
    {
        ret["login_user"]=getValueOfLoginUser();
    }
    else
    {
        ret["login_user"]=Json::Value();
    }
    if(getBookId())
    {
        ret["book_id"]=getValueOfBookId();
    }
    else
    {
        ret["book_id"]=Json::Value();
    }
    if(getAuthorId())
    {
        ret["author_id"]=getValueOfAuthorId();
    }
    else
    {
        ret["author_id"]=Json::Value();
    }
    return ret;
}

Json::Value UserBooks::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 4)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getLoginUser())
            {
                ret[pMasqueradingVector[1]]=getValueOfLoginUser();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getBookId())
            {
                ret[pMasqueradingVector[2]]=getValueOfBookId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getAuthorId())
            {
                ret[pMasqueradingVector[3]]=getValueOfAuthorId();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getLoginUser())
    {
        ret["login_user"]=getValueOfLoginUser();
    }
    else
    {
        ret["login_user"]=Json::Value();
    }
    if(getBookId())
    {
        ret["book_id"]=getValueOfBookId();
    }
    else
    {
        ret["book_id"]=Json::Value();
    }
    if(getAuthorId())
    {
        ret["author_id"]=getValueOfAuthorId();
    }
    else
    {
        ret["author_id"]=Json::Value();
    }
    return ret;
}

bool UserBooks::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("login_user"))
    {
        if(!validJsonOfField(1, "login_user", pJson["login_user"], err, true))
            return false;
    }
    else
    {
        err="The login_user column cannot be null";
        return false;
    }
    if(pJson.isMember("book_id"))
    {
        if(!validJsonOfField(2, "book_id", pJson["book_id"], err, true))
            return false;
    }
    else
    {
        err="The book_id column cannot be null";
        return false;
    }
    if(pJson.isMember("author_id"))
    {
        if(!validJsonOfField(3, "author_id", pJson["author_id"], err, true))
            return false;
    }
    else
    {
        err="The author_id column cannot be null";
        return false;
    }
    return true;
}
bool UserBooks::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                   const std::vector<std::string> &pMasqueradingVector,
                                                   std::string &err)
{
    if(pMasqueradingVector.size() != 4)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool UserBooks::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("login_user"))
    {
        if(!validJsonOfField(1, "login_user", pJson["login_user"], err, false))
            return false;
    }
    if(pJson.isMember("book_id"))
    {
        if(!validJsonOfField(2, "book_id", pJson["book_id"], err, false))
            return false;
    }
    if(pJson.isMember("author_id"))
    {
        if(!validJsonOfField(3, "author_id", pJson["author_id"], err, false))
            return false;
    }
    return true;
}
bool UserBooks::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 4)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool UserBooks::validJsonOfField(size_t index,
                                 const std::string &fieldName,
                                 const Json::Value &pJson,
                                 std::string &err,
                                 bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
